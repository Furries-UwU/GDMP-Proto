syntax = "proto3";
package gdmp;

message Packet {
  oneof packet {
    PlaceholderPacket placeholder                = 2;
    Placeholder2Packet placeholder2              = 3;
    Placeholder3Packet placeholder3              = 4;
    PlayerJoinPacket player_join                 = 5;
    PlayerMovePacket player_move                 = 6;
    PlayerLeavePacket player_leave               = 7;
    //PlayerInvisibilityPacket player_invisibility = 8;
  };
}

// --------- GENERIC TYPES (used in packets) ---------
message Room {
  int32 level_id = 1;
  optional string key = 2;
  // maybe more stuff, private rooms maybe?
}

// todo for position: flipped/gravity
message Position {
  float pos_x    = 1;
  float pos_y    = 2;
  float rotation = 3;
  float scale    = 4;
  bool  visible  = 5;
  bool  pressed  = 6;
}

message Colors {
  uint32 primary   = 1;
  uint32 secondary = 2;
}

message ColorInfo {
  Colors color_p1 = 1; // rgb int (primary player color)
  Colors color_p2 = 2; // rgb int (secondary player color)
  bool glowy      = 3;  // is glow enabled?
}

message PlayerVisuals {
  /* protobuf doesn't have 16bit types */
  uint32 icon_cube   = 1;
  uint32 icon_ship   = 2;
  uint32 icon_ball   = 3;
  uint32 icon_ufo    = 4;
  uint32 icon_wave   = 5;
  uint32 icon_robot  = 6;
  uint32 icon_spider = 7;
  ColorInfo colors   = 8;
}

enum GameMode {
  NONE   = 0;
  CUBE   = 1;
  SHIP   = 2;
  BALL   = 3;
  UFO    = 4;
  WAVE   = 5;
  ROBOT  = 6;
  SPIDER = 7;
}

// --------- PACKET TYPES (suffixed with Packet) ---------
// these might be used for proper auth later
message PlaceholderPacket {}
message Placeholder2Packet {}
message Placeholder3Packet {}

message PlayerJoinPacket {
    Room room            = 1;
    PlayerVisuals visual = 2;
    string      username = 3;
    optional uint64 p_id = 4; // REQUIRED for server -> client
}

message PlayerMovePacket {
  Position pos_p1      = 1;
  Position pos_p2      = 2;
  GameMode gamemode_p1 = 3;
  GameMode gamemode_p2 = 4;
  optional uint64 p_id = 5; // REQUIRED for server -> client
  // maybe a boolean in here to indicate whether dual mode is used to make impl easier?
}

message PlayerLeavePacket {
  Room room            = 1;
  optional uint64 p_id = 2; // REQUIRED for server -> client
}

/* this won't be used rn, for now we'll just add a bool to Position that indicates invisibility for simplicity's sake
message PlayerInvisibilityPacket {
  bool invisible                = 1;
  // All of these optional field will be required if `invisible` is false
  optional Position pos_p1      = 2;
  optional Position pos_p2      = 3;
  optional GameMode gamemode_p1 = 4;
  optional GameMode gamemode_p2 = 5;
  optional PlayerVisuals visual = 6;
  // ---------------------------------------------------------------------
  optional uint64 p_id          = 7; // REQUIRED for server -> client
}
*/